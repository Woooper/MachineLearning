import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import seaborn as sns
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score,cross_val_predict
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report,log_loss
from sklearn.metrics import roc_auc_score,roc_curve
import matplotlib.pyplot as plt

from sklearn.neural_network import MLPClassifier

diabetes = pd.read_csv('Diabetes.csv')
df = diabetes.copy()
df= df.dropna()
y=df['Outcome']
x = df.drop (['Outcome'],axis = 1)
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 42,test_size = 0.3)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(x_train)
x_train_scaled = scaler.transform(x_train)
x_test_scaled = scaler.transform(x_test)

mlpc = MLPClassifier().fit(x_train_scaled,y_train)

y_pred = mlpc.predict(x_test_scaled)

mlpc_params = {'hidden_layer_sizes':[(10,10,10),(100,100,100),(100,100),(3,5),(5,3)],
              'alpha':[0.1,0.01,0.02,0.005,0.0001,0.00001],
              'solver':['lbfgs','adam','sgd'],
              'activation':['relu','logistic']}
mlpc_cv_model = GridSearchCV(mlpc,mlpc_params,cv=10,n_jobs=-1,verbose=2)
mlpc_cv_model.fit(x_train_scaled,y_train)
mlpc_tuned = MLPClassifier(hidden_layer_sizes=(10,10,10),alpha=0.005,solver='adam',activation = 'relu' )
y_pred = mlpc_tuned.predict(x_test_scaled)
accuracy_score(y_test,y_pred)
