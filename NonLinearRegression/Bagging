import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split,ShuffleSplit,GridSearchCV, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import scale
from sklearn import model_selection
from sklearn.ensemble import BaggingRegressor

hit = pd.read_csv('Hitters.csv')
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y = df['Salary']
X_ = df.drop(['Salary','Division','NewLeague','League'],axis=1).astype('float64')
X = pd.concat([X_,dms[['League_N','Division_W','NewLeague_N']]],axis=1)
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)

bag_model = BaggingRegressor(bootstrap_features=True)
bag_model.fit(x_train,y_train)

y_pred = bag_model.predict(x_test)

np.sqrt(mean_squared_error(y_pred,y_test))

iki_y_pred = bag_model.estimators_[1].fit(x_train,y_train).predict(x_test)
np.sqrt(mean_squared_error(iki_y_pred,y_test))

bag_params = {'n_estimators':(2,20)}
tuned_bagging = GridSearchCV(bag_model,bag_params,cv=10)
tuned_bagging.fit(x_train,y_train)

bag_tuned = BaggingRegressor(n_estimators = 14,random_state = 45).fit(x_train,y_train)
y_pred = bag_tuned.predict(x_test)
np.sqrt(mean_squared_error(y_pred,y_test))




