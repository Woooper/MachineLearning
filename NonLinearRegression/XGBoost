import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split,ShuffleSplit,GridSearchCV, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import scale
from sklearn import model_selection

hit = pd.read_csv('Hitters.csv')
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y = df['Salary']
X_ = df.drop(['Salary','Division','NewLeague','League'],axis=1).astype('float64')
X = pd.concat([X_,dms[['League_N','Division_W','NewLeague_N']]],axis=1)
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)

import xgboost as xgb

DM_train = xgb.DMatrix(data=x_train,label=y_train)
DM_test = xgb.DMatrix(data=x_test,label=y_test)

from xgboost import XGBRegressor
xgb = XGBRegressor().fit(x_train,y_train)
y_pred = xgb.predict(x_test)
np.sqrt(mean_squared_error(y_pred,y_test))

xgb_params = {'colsample_bytree':[0.4,0.5,0.6,0.9,1],
             'max_depth':[2,3,4,5,6],
             'n_estimators':[100,200,500,1000],
             'learning_rate':[0.1,0.01,0.5]}
             
xgb_cv=GridSearchCV(xgb,xgb_params,cv=10,n_jobs=-1,verbose=2)
xgb_cv.fit(x_train,y_train)

xgb_tuned = XGBRegressor(colsample_bytree=0.5,learning_rate=0.1,max_depth=2,n_estimators=500)
xgb_tuned.fit(x_train,y_train)
y_pred = xgb_tuned.predict(x_test)
np.sqrt(mean_squared_error(y_pred,y_test))

from lightgbm import LGBMRegressor

lgbm = LGBMRegressor()
lgbm_model = lgbm.fit(x_train,y_train)

y_pred = lgbm_model.predict(x_test,num_iteration=lgbm_model.best_iteration_)
np.sqrt(mean_squared_error(y_pred,y_test))

lgbm_params = {'learning_rate':[0.01,0.1,0.5,1],
            'n_estimators':[20,40,100,200,500,1000],
            'max_depth':[1,2,3,4,5,6,7,8]}
lgbm_model_cv = GridSearchCV(lgbm_model,lgbm_params,cv=10,n_jobs=-1,verbose = 2)

lgbm_model_cv.fit(x_train,y_train)
lgbm_tuned = LGBMRegressor(learning_rate=0.1,max_depth=6,n_estimators = 20).fit(x_train,y_train)
y_pred = lgbm_tuned.predict(x_test,num_iteration=lgbm_model.best_iteration_)

from catboost import CatBoostRegressor
catb = CatBoostRegressor()
catb_model=catb.fit(x_train,y_train)

catb_grid = {'iterations':[200,500,1000,2000],
            'learning_rate':[0.01,0.03,0.05,0.1],
            'depth': [3,4,5,6,7,8]}

catb_cv_model = GridSearchCV(catb,catb_grid,cv=5,n_jobs=-1,verbose=2)          
catb_cv_model.fit(x_train,y_train)
catb_tuned = CatBoostRegressor(iterations = ,learning_rate = ,depth = ).fit(x_train,y_train)
y_pred = catb_tuned.predict(x_test)
np.sqrt(mean_squared_error(y_pred,y_test))
