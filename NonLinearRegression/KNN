import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split,ShuffleSplit,GridSearchCV, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import scale
from sklearn import model_selection
from sklearn.neighbors import KNeighborsRegressor

hit = pd.read_csv('Hitters.csv')
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y = df['Salary']
X_ = df.drop(['Salary','Division','NewLeague','League'],axis=1).astype('float64')
X = pd.concat([X_,dms[['League_N','Division_W','NewLeague_N']]],axis=1)
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)

knn_model = KNeighborsRegressor().fit(x_train,y_train)

y_pred = knn_model.predict(x_test)

np.sqrt(mean_squared_error(y_test,y_pred))

RMSE=[]

for k in range(10):
    k = k+1
    knn_model = KNeighborsRegressor(n_neighbors = k).fit(x_train,y_train)
    y_pred = knn_model.predict(x_train)
    rmse = np.sqrt(mean_squared_error(y_train,y_pred))
    RMSE.append(rmse)
    print('k=',k,'için RMSE değeri : ',rmse)

from sklearn.model_selection import GridSearchCV
knn_params = {'n_neighbors':np.arange(1,30,1)}
knn = KNeighborsRegressor()
knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)
knn_cv_model.fit(x_train,y_train)
knn_cv_model.best_params_['n_neighbors']
knn_tuned = KNeighborsRegressor(n_neighbors= knn_cv_model.best_params_['n_neighbors'])
knn_tuned.fit(x_train,y_train)
np.sqrt(mean_squared_error(y_test,knn_tuned.predict(x_test)))

