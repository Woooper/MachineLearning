import pandas as pdhit = pd.read_csv('Hitters.csv')
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y = df['Salary']
x_ = df.drop(['Salary','League','Division','NewLeague'],axis=1).astype('float64')
x = pd.concat([x_,dms[['League_N','Division_W','NewLeague_N']]],axis=1)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test =train_test_split(x,
                                               y,
                                               test_size=0.25,
                                               random_state=42)
training=df.copy()
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale
pca = PCA()
X_reduced_train = pca.fit_transform(scale(x_train))
import numpy as np

np.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)*100)[0:10]

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
pcr_model = lm.fit(X_reduced_train,y_train)
y_pred = pcr_model.predict(X_reduced_train)
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
r2_score(y_train,y_pred)
pca2 = PCA()
X_reduced_test = pca2.fit_transform(scale(x_test))
y_pred = pcr_model.predict(X_reduced_test)
lm = LinearRegression()
pcr_model = lm.fit(X_reduced_train[:,0:10],y_train)
y_pred = pcr_model.predict(X_reduced_test[:,0:10])
print(np.sqrt(mean_squared_error(y_test,y_pred)))
from sklearn import model_selection

cv_10 = model_selection.KFold(n_splits = 10,
                             shuffle = True,
                              random_state = 1
                             )
                             
RMSE = []         
for i in np.arange(1,X_reduced_train.shape[1]+1):
    
    score = np.sqrt(-1*model_selection.cross_val_score(lm,
                                                      X_reduced_train[:,:i],
                                                      y_train.ravel(),
                                                      cv=cv_10,
                                                      scoring = 'neg_mean_squared_error').mean())
pcr_model = lm.fit(X_reduced_train[:,0:6],y_train)
y_pred = pcr_model.predict(X_reduced_train[:,0:6])
y_pred = pcr_model.predict(X_reduced_test[:,0:6])
print(np.sqrt(mean_squared_error(y_test,y_pred)))
RMSE.append(score)
